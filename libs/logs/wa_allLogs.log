c:\git\StudCloud.WA/
trace
debug
info
warn
error
fatal
c:\git\StudCloud.WA/
trace
debug
info
warn
error
fatal
[12:57:10] [[32m INFO[39m] - c:\git\StudCloud.WA/

[12:57:10] [[34mTRACE[39m] - trace

[12:57:10] [[36mDEBUG[39m] - debug

[12:57:10] [[32m INFO[39m] - info

[12:57:10] [[33m WARN[39m] - warn

[12:57:10] [[31mERROR[39m] - error

[12:57:10] [[35mFATAL[39m] - fatal

[12:57:56] - c:\git\StudCloud.WA/

[12:57:56] - trace

[12:57:56] - debug

[12:57:56] - info

[12:57:56] - warn

[12:57:56] - error

[12:57:56] - fatal

[12:58:30] - 2016-07-08 12:58:30.305c:\git\StudCloud.WA/

[12:58:30] - 2016-07-08 12:58:30.309trace

[12:58:30] - 2016-07-08 12:58:30.310debug

[12:58:30] - 2016-07-08 12:58:30.310info

[12:58:30] - 2016-07-08 12:58:30.310warn

[12:58:30] - 2016-07-08 12:58:30.311error

[12:58:30] - 2016-07-08 12:58:30.311fatal

[12:58:44] - 2016-07-08 12:58:44.286

[12:58:44] - 2016-07-08 12:58:44.289

[12:58:44] - 2016-07-08 12:58:44.290

[12:58:44] - 2016-07-08 12:58:44.290

[12:58:44] - 2016-07-08 12:58:44.290

[12:58:44] - 2016-07-08 12:58:44.291

[12:58:44] - 2016-07-08 12:58:44.291

[2016-07-08 12:59:14.312] - c:\git\StudCloud.WA/

[2016-07-08 12:59:14.316] - trace

[2016-07-08 12:59:14.316] - debug

[2016-07-08 12:59:14.316] - info

[2016-07-08 12:59:14.316] - warn

[2016-07-08 12:59:14.317] - error

[2016-07-08 12:59:14.317] - fatal

[2016-07-08 13:00:24.458] - c:\git\StudCloud.WA/

[2016-07-08 13:00:24.463] - trace

[2016-07-08 13:00:24.464] - debug

[2016-07-08 13:00:24.464] - info

[2016-07-08 13:00:24.464] - warn

[2016-07-08 13:00:24.465] - error

[2016-07-08 13:00:24.465] - fatal

[2016-07-08 13:12:08.679] - c:\git\StudCloud.WA/

[2016-07-08 13:12:08.683] - trace

[2016-07-08 13:12:08.684] - debug

[2016-07-08 13:12:08.684] - info

[2016-07-08 13:12:08.684] - warn

[2016-07-08 13:12:08.684] - error

[2016-07-08 13:12:08.684] - fatal

[2016-07-08 13:13:31.665] - c:\git\StudCloud.WA/

[2016-07-08 13:13:31.669] - trace

[2016-07-08 13:13:31.669] - debug

[2016-07-08 13:13:31.669] - info

[2016-07-08 13:13:31.669] - warn

[2016-07-08 13:13:31.669] - error

[2016-07-08 13:13:31.670] - fatal

[2016-07-08 13:16:17.625] - c:\git\StudCloud.WA/

[2016-07-08 13:16:17.629] - trace

[2016-07-08 13:16:17.629] - debug

[2016-07-08 13:16:17.629] - info

[2016-07-08 13:16:17.630] - warn

[2016-07-08 13:16:17.630] - error

[2016-07-08 13:16:17.630] - fatal

[2016-07-08 13:16:36.758] - c:\git\StudCloud.WA/

[2016-07-08 13:16:36.762] - trace

[2016-07-08 13:16:36.762] - debug

[2016-07-08 13:16:36.763] - info

[2016-07-08 13:16:36.763] - warn

[2016-07-08 13:16:36.763] - error

[2016-07-08 13:16:36.763] - fatal

[2016-07-08 13:17:11.732] - c:\git\StudCloud.WA/

[2016-07-08 13:17:11.736] - trace

[2016-07-08 13:17:11.736] - debug

[2016-07-08 13:17:11.737] - info

[2016-07-08 13:17:11.737] - warn

[2016-07-08 13:17:11.737] - error

[2016-07-08 13:17:11.737] - fatal

[2016-07-08 13:27:05.731] - c:\git\StudCloud.WA/

[2016-07-08 13:27:05.735] - trace

[2016-07-08 13:27:05.736] - debug

[2016-07-08 13:27:05.736] - info

[2016-07-08 13:27:05.737] - warn

[2016-07-08 13:27:05.737] - error

[2016-07-08 13:27:05.737] - fatal

[2016-07-08 13:44:41.705] - this.request.query.mail

[2016-07-08 13:44:51.934] - undefined

[2016-07-08 13:44:53.941] - undefined

[2016-07-08 13:45:13.291] - undefined

[2016-07-08 13:45:14.436] - undefined

[2016-07-08 13:47:18.429] - { method: 'POST',
  url: '/test',
  header: 
   { accept: '*/*',
     'cache-control': 'no-cache',
     'content-length': '29',
     'content-type': 'application/x-www-form-urlencoded; charset=windows-1251',
     host: 'localhost:3000',
     connection: 'Keep-Alive',
     'user-agent': 'Apache-HttpClient/4.4.1 (Java/1.8.0_77)',
     'accept-encoding': 'gzip,deflate' } }

[2016-07-08 13:48:23.589] - { method: 'POST',
  url: '/test',
  header: 
   { accept: '*/*',
     'cache-control': 'no-cache',
     'content-length': '257',
     'content-type': 'multipart/form-data; boundary=LhVhNXeLiijeHkXpVQn6VQb8ik-WScPhi99C',
     host: 'localhost:3000',
     connection: 'Keep-Alive',
     'user-agent': 'Apache-HttpClient/4.4.1 (Java/1.8.0_77)',
     'accept-encoding': 'gzip,deflate' } }

[2016-07-08 13:48:24.500] - { method: 'POST',
  url: '/test',
  header: 
   { accept: '*/*',
     'cache-control': 'no-cache',
     'content-length': '245',
     'content-type': 'multipart/form-data; boundary=QbyKJKDHIMcrro0fCko9gcyJh7EDaD',
     host: 'localhost:3000',
     connection: 'Keep-Alive',
     'user-agent': 'Apache-HttpClient/4.4.1 (Java/1.8.0_77)',
     'accept-encoding': 'gzip,deflate' } }

[2016-07-08 13:49:01.302] - { request: 
   { method: 'POST',
     url: '/test',
     header: 
      { accept: '*/*',
        'cache-control': 'no-cache',
        'content-length': '247',
        'content-type': 'multipart/form-data; boundary=Ip1_VJBAbLNczcGBvpT_RYxDoFZHipe',
        host: 'localhost:3000',
        connection: 'Keep-Alive',
        'user-agent': 'Apache-HttpClient/4.4.1 (Java/1.8.0_77)',
        'accept-encoding': 'gzip,deflate' } },
  response: { status: 404, message: 'Not Found', header: {} },
  app: { subdomainOffset: 2, proxy: false, env: 'development' },
  originalUrl: '/test',
  req: '<original node req>',
  res: '<original node res>',
  socket: '<original node socket>' }

[2016-07-08 13:49:24.609] - IncomingMessage {
  _readableState: 
   ReadableState {
     objectMode: false,
     highWaterMark: 16384,
     buffer: [],
     length: 0,
     pipes: null,
     pipesCount: 0,
     flowing: null,
     ended: false,
     endEmitted: false,
     reading: false,
     sync: true,
     needReadable: false,
     emittedReadable: false,
     readableListening: false,
     resumeScheduled: false,
     defaultEncoding: 'utf8',
     ranOut: false,
     awaitDrain: 0,
     readingMore: false,
     decoder: null,
     encoding: null },
  readable: true,
  domain: null,
  _events: {},
  _eventsCount: 0,
  _maxListeners: undefined,
  socket: 
   Socket {
     _connecting: false,
     _hadError: false,
     _handle: 
      TCP {
        _externalStream: {},
        fd: -1,
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        onconnection: null,
        writeQueueSize: 0 },
     _parent: null,
     _host: null,
     _readableState: 
      ReadableState {
        objectMode: false,
        highWaterMark: 16384,
        buffer: [],
        length: 0,
        pipes: null,
        pipesCount: 0,
        flowing: true,
        ended: false,
        endEmitted: false,
        reading: true,
        sync: false,
        needReadable: true,
        emittedReadable: false,
        readableListening: false,
        resumeScheduled: false,
        defaultEncoding: 'utf8',
        ranOut: false,
        awaitDrain: 0,
        readingMore: false,
        decoder: null,
        encoding: null },
     readable: true,
     domain: null,
     _events: 
      { end: [Object],
        finish: [Function: onSocketFinish],
        _socketEnd: [Function: onSocketEnd],
        drain: [Object],
        timeout: [Function],
        error: [Object],
        close: [Object],
        data: [Function: socketOnData],
        resume: [Function: onSocketResume],
        pause: [Function: onSocketPause] },
     _eventsCount: 10,
     _maxListeners: undefined,
     _writableState: 
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        decodeStrings: false,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: true,
        bufferProcessing: false,
        onwrite: [Function],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: [Object] },
     writable: true,
     allowHalfOpen: true,
     destroyed: false,
     bytesRead: 0,
     _bytesDispatched: 0,
     _sockname: null,
     _pendingData: null,
     _pendingEncoding: '',
     server: 
      Server {
        domain: null,
        _events: [Object],
        _eventsCount: 3,
        _maxListeners: undefined,
        _connections: 1,
        _handle: [Object],
        _usingSlaves: false,
        _slaves: [],
        _unref: false,
        allowHalfOpen: true,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 120000,
        _pendingResponseData: 0,
        _connectionKey: '6::::3000' },
     _server: 
      Server {
        domain: null,
        _events: [Object],
        _eventsCount: 3,
        _maxListeners: undefined,
        _connections: 1,
        _handle: [Object],
        _usingSlaves: false,
        _slaves: [],
        _unref: false,
        allowHalfOpen: true,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 120000,
        _pendingResponseData: 0,
        _connectionKey: '6::::3000' },
     _idleTimeout: 120000,
     _idleNext: { _idleNext: [Circular], _idlePrev: [Circular] },
     _idlePrev: { _idleNext: [Circular], _idlePrev: [Circular] },
     _idleStart: 1457,
     parser: 
      HTTPParser {
        '0': [Function: parserOnHeaders],
        '1': [Function: parserOnHeadersComplete],
        '2': [Function: parserOnBody],
        '3': [Function: parserOnMessageComplete],
        '4': [Function: onParserExecute],
        _headers: [],
        _url: '',
        _consumed: true,
        socket: [Circular],
        incoming: [Circular],
        outgoing: null,
        maxHeaderPairs: 2000,
        onIncoming: [Function: parserOnIncoming] },
     on: [Function: socketOnWrap],
     _paused: false,
     read: [Function],
     _consuming: true,
     _httpMessage: 
      ServerResponse {
        domain: null,
        _events: [Object],
        _eventsCount: 2,
        _maxListeners: undefined,
        output: [],
        outputEncodings: [],
        outputCallbacks: [],
        outputSize: 0,
        writable: true,
        _last: false,
        chunkedEncoding: false,
        shouldKeepAlive: true,
        useChunkedEncodingByDefault: true,
        sendDate: true,
        _removedHeader: {},
        _contentLength: null,
        _hasBody: true,
        _trailer: '',
        finished: false,
        _headerSent: false,
        socket: [Circular],
        connection: [Circular],
        _header: null,
        _headers: null,
        _headerNames: {},
        _onPendingData: [Function: updateOutgoingData],
        statusCode: 404,
        __onFinished: [Object] } },
  connection: 
   Socket {
     _connecting: false,
     _hadError: false,
     _handle: 
      TCP {
        _externalStream: {},
        fd: -1,
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        onconnection: null,
        writeQueueSize: 0 },
     _parent: null,
     _host: null,
     _readableState: 
      ReadableState {
        objectMode: false,
        highWaterMark: 16384,
        buffer: [],
        length: 0,
        pipes: null,
        pipesCount: 0,
        flowing: true,
        ended: false,
        endEmitted: false,
        reading: true,
        sync: false,
        needReadable: true,
        emittedReadable: false,
        readableListening: false,
        resumeScheduled: false,
        defaultEncoding: 'utf8',
        ranOut: false,
        awaitDrain: 0,
        readingMore: false,
        decoder: null,
        encoding: null },
     readable: true,
     domain: null,
     _events: 
      { end: [Object],
        finish: [Function: onSocketFinish],
        _socketEnd: [Function: onSocketEnd],
        drain: [Object],
        timeout: [Function],
        error: [Object],
        close: [Object],
        data: [Function: socketOnData],
        resume: [Function: onSocketResume],
        pause: [Function: onSocketPause] },
     _eventsCount: 10,
     _maxListeners: undefined,
     _writableState: 
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        decodeStrings: false,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: true,
        bufferProcessing: false,
        onwrite: [Function],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: [Object] },
     writable: true,
     allowHalfOpen: true,
     destroyed: false,
     bytesRead: 0,
     _bytesDispatched: 0,
     _sockname: null,
     _pendingData: null,
     _pendingEncoding: '',
     server: 
      Server {
        domain: null,
        _events: [Object],
        _eventsCount: 3,
        _maxListeners: undefined,
        _connections: 1,
        _handle: [Object],
        _usingSlaves: false,
        _slaves: [],
        _unref: false,
        allowHalfOpen: true,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 120000,
        _pendingResponseData: 0,
        _connectionKey: '6::::3000' },
     _server: 
      Server {
        domain: null,
        _events: [Object],
        _eventsCount: 3,
        _maxListeners: undefined,
        _connections: 1,
        _handle: [Object],
        _usingSlaves: false,
        _slaves: [],
        _unref: false,
        allowHalfOpen: true,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 120000,
        _pendingResponseData: 0,
        _connectionKey: '6::::3000' },
     _idleTimeout: 120000,
     _idleNext: { _idleNext: [Circular], _idlePrev: [Circular] },
     _idlePrev: { _idleNext: [Circular], _idlePrev: [Circular] },
     _idleStart: 1457,
     parser: 
      HTTPParser {
        '0': [Function: parserOnHeaders],
        '1': [Function: parserOnHeadersComplete],
        '2': [Function: parserOnBody],
        '3': [Function: parserOnMessageComplete],
        '4': [Function: onParserExecute],
        _headers: [],
        _url: '',
        _consumed: true,
        socket: [Circular],
        incoming: [Circular],
        outgoing: null,
        maxHeaderPairs: 2000,
        onIncoming: [Function: parserOnIncoming] },
     on: [Function: socketOnWrap],
     _paused: false,
     read: [Function],
     _consuming: true,
     _httpMessage: 
      ServerResponse {
        domain: null,
        _events: [Object],
        _eventsCount: 2,
        _maxListeners: undefined,
        output: [],
        outputEncodings: [],
        outputCallbacks: [],
        outputSize: 0,
        writable: true,
        _last: false,
        chunkedEncoding: false,
        shouldKeepAlive: true,
        useChunkedEncodingByDefault: true,
        sendDate: true,
        _removedHeader: {},
        _contentLength: null,
        _hasBody: true,
        _trailer: '',
        finished: false,
        _headerSent: false,
        socket: [Circular],
        connection: [Circular],
        _header: null,
        _headers: null,
        _headerNames: {},
        _onPendingData: [Function: updateOutgoingData],
        statusCode: 404,
        __onFinished: [Object] } },
  httpVersionMajor: 1,
  httpVersionMinor: 1,
  httpVersion: '1.1',
  complete: false,
  headers: 
   { accept: '*/*',
     'cache-control': 'no-cache',
     'content-length': '265',
     'content-type': 'multipart/form-data; boundary=HANzTI6t0Hwc4yujY5dOt_YGZF57QG3RLYfVoi71',
     host: 'localhost:3000',
     connection: 'Keep-Alive',
     'user-agent': 'Apache-HttpClient/4.4.1 (Java/1.8.0_77)',
     'accept-encoding': 'gzip,deflate' },
  rawHeaders: 
   [ 'Accept',
     '*/*',
     'Cache-Control',
     'no-cache',
     'Content-Length',
     '265',
     'Content-Type',
     'multipart/form-data; boundary=HANzTI6t0Hwc4yujY5dOt_YGZF57QG3RLYfVoi71',
     'Host',
     'localhost:3000',
     'Connection',
     'Keep-Alive',
     'User-Agent',
     'Apache-HttpClient/4.4.1 (Java/1.8.0_77)',
     'Accept-Encoding',
     'gzip,deflate' ],
  trailers: {},
  rawTrailers: [],
  upgrade: false,
  url: '/test',
  method: 'POST',
  statusCode: null,
  statusMessage: null,
  client: 
   Socket {
     _connecting: false,
     _hadError: false,
     _handle: 
      TCP {
        _externalStream: {},
        fd: -1,
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        onconnection: null,
        writeQueueSize: 0 },
     _parent: null,
     _host: null,
     _readableState: 
      ReadableState {
        objectMode: false,
        highWaterMark: 16384,
        buffer: [],
        length: 0,
        pipes: null,
        pipesCount: 0,
        flowing: true,
        ended: false,
        endEmitted: false,
        reading: true,
        sync: false,
        needReadable: true,
        emittedReadable: false,
        readableListening: false,
        resumeScheduled: false,
        defaultEncoding: 'utf8',
        ranOut: false,
        awaitDrain: 0,
        readingMore: false,
        decoder: null,
        encoding: null },
     readable: true,
     domain: null,
     _events: 
      { end: [Object],
        finish: [Function: onSocketFinish],
        _socketEnd: [Function: onSocketEnd],
        drain: [Object],
        timeout: [Function],
        error: [Object],
        close: [Object],
        data: [Function: socketOnData],
        resume: [Function: onSocketResume],
        pause: [Function: onSocketPause] },
     _eventsCount: 10,
     _maxListeners: undefined,
     _writableState: 
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        decodeStrings: false,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: true,
        bufferProcessing: false,
        onwrite: [Function],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: [Object] },
     writable: true,
     allowHalfOpen: true,
     destroyed: false,
     bytesRead: 0,
     _bytesDispatched: 0,
     _sockname: null,
     _pendingData: null,
     _pendingEncoding: '',
     server: 
      Server {
        domain: null,
        _events: [Object],
        _eventsCount: 3,
        _maxListeners: undefined,
        _connections: 1,
        _handle: [Object],
        _usingSlaves: false,
        _slaves: [],
        _unref: false,
        allowHalfOpen: true,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 120000,
        _pendingResponseData: 0,
        _connectionKey: '6::::3000' },
     _server: 
      Server {
        domain: null,
        _events: [Object],
        _eventsCount: 3,
        _maxListeners: undefined,
        _connections: 1,
        _handle: [Object],
        _usingSlaves: false,
        _slaves: [],
        _unref: false,
        allowHalfOpen: true,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 120000,
        _pendingResponseData: 0,
        _connectionKey: '6::::3000' },
     _idleTimeout: 120000,
     _idleNext: { _idleNext: [Circular], _idlePrev: [Circular] },
     _idlePrev: { _idleNext: [Circular], _idlePrev: [Circular] },
     _idleStart: 1457,
     parser: 
      HTTPParser {
        '0': [Function: parserOnHeaders],
        '1': [Function: parserOnHeadersComplete],
        '2': [Function: parserOnBody],
        '3': [Function: parserOnMessageComplete],
        '4': [Function: onParserExecute],
        _headers: [],
        _url: '',
        _consumed: true,
        socket: [Circular],
        incoming: [Circular],
        outgoing: null,
        maxHeaderPairs: 2000,
        onIncoming: [Function: parserOnIncoming] },
     on: [Function: socketOnWrap],
     _paused: false,
     read: [Function],
     _consuming: true,
     _httpMessage: 
      ServerResponse {
        domain: null,
        _events: [Object],
        _eventsCount: 2,
        _maxListeners: undefined,
        output: [],
        outputEncodings: [],
        outputCallbacks: [],
        outputSize: 0,
        writable: true,
        _last: false,
        chunkedEncoding: false,
        shouldKeepAlive: true,
        useChunkedEncodingByDefault: true,
        sendDate: true,
        _removedHeader: {},
        _contentLength: null,
        _hasBody: true,
        _trailer: '',
        finished: false,
        _headerSent: false,
        socket: [Circular],
        connection: [Circular],
        _header: null,
        _headers: null,
        _headerNames: {},
        _onPendingData: [Function: updateOutgoingData],
        statusCode: 404,
        __onFinished: [Object] } },
  _consuming: false,
  _dumped: false,
  _parsedUrl: 
   Url {
     protocol: null,
     slashes: null,
     auth: null,
     host: null,
     port: null,
     hostname: null,
     hash: null,
     search: null,
     query: null,
     pathname: '/test',
     path: '/test',
     href: '/test',
     _raw: '/test' } }

[2016-07-08 13:50:20.946] - undefined

[2016-07-08 13:50:30.480] - undefined

[2016-07-08 13:50:31.416] - undefined

[2016-07-08 13:50:34.348] - undefined

[2016-07-08 13:50:47.910] - IncomingMessage {
  _readableState: 
   ReadableState {
     objectMode: false,
     highWaterMark: 16384,
     buffer: [],
     length: 0,
     pipes: null,
     pipesCount: 0,
     flowing: null,
     ended: false,
     endEmitted: false,
     reading: false,
     sync: true,
     needReadable: false,
     emittedReadable: false,
     readableListening: false,
     resumeScheduled: false,
     defaultEncoding: 'utf8',
     ranOut: false,
     awaitDrain: 0,
     readingMore: false,
     decoder: null,
     encoding: null },
  readable: true,
  domain: null,
  _events: {},
  _eventsCount: 0,
  _maxListeners: undefined,
  socket: 
   Socket {
     _connecting: false,
     _hadError: false,
     _handle: 
      TCP {
        _externalStream: {},
        fd: -1,
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        onconnection: null,
        writeQueueSize: 0 },
     _parent: null,
     _host: null,
     _readableState: 
      ReadableState {
        objectMode: false,
        highWaterMark: 16384,
        buffer: [],
        length: 0,
        pipes: null,
        pipesCount: 0,
        flowing: true,
        ended: false,
        endEmitted: false,
        reading: true,
        sync: false,
        needReadable: true,
        emittedReadable: false,
        readableListening: false,
        resumeScheduled: false,
        defaultEncoding: 'utf8',
        ranOut: false,
        awaitDrain: 0,
        readingMore: false,
        decoder: null,
        encoding: null },
     readable: true,
     domain: null,
     _events: 
      { end: [Object],
        finish: [Function: onSocketFinish],
        _socketEnd: [Function: onSocketEnd],
        drain: [Object],
        timeout: [Function],
        error: [Object],
        close: [Object],
        data: [Function: socketOnData],
        resume: [Function: onSocketResume],
        pause: [Function: onSocketPause] },
     _eventsCount: 10,
     _maxListeners: undefined,
     _writableState: 
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        decodeStrings: false,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: true,
        bufferProcessing: false,
        onwrite: [Function],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: [Object] },
     writable: true,
     allowHalfOpen: true,
     destroyed: false,
     bytesRead: 0,
     _bytesDispatched: 0,
     _sockname: null,
     _pendingData: null,
     _pendingEncoding: '',
     server: 
      Server {
        domain: null,
        _events: [Object],
        _eventsCount: 3,
        _maxListeners: undefined,
        _connections: 1,
        _handle: [Object],
        _usingSlaves: false,
        _slaves: [],
        _unref: false,
        allowHalfOpen: true,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 120000,
        _pendingResponseData: 0,
        _connectionKey: '6::::3000' },
     _server: 
      Server {
        domain: null,
        _events: [Object],
        _eventsCount: 3,
        _maxListeners: undefined,
        _connections: 1,
        _handle: [Object],
        _usingSlaves: false,
        _slaves: [],
        _unref: false,
        allowHalfOpen: true,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 120000,
        _pendingResponseData: 0,
        _connectionKey: '6::::3000' },
     _idleTimeout: 120000,
     _idleNext: { _idleNext: [Circular], _idlePrev: [Circular] },
     _idlePrev: { _idleNext: [Circular], _idlePrev: [Circular] },
     _idleStart: 2147,
     parser: 
      HTTPParser {
        '0': [Function: parserOnHeaders],
        '1': [Function: parserOnHeadersComplete],
        '2': [Function: parserOnBody],
        '3': [Function: parserOnMessageComplete],
        '4': [Function: onParserExecute],
        _headers: [],
        _url: '',
        _consumed: true,
        socket: [Circular],
        incoming: [Circular],
        outgoing: null,
        maxHeaderPairs: 2000,
        onIncoming: [Function: parserOnIncoming] },
     on: [Function: socketOnWrap],
     _paused: false,
     read: [Function],
     _consuming: true,
     _httpMessage: 
      ServerResponse {
        domain: null,
        _events: [Object],
        _eventsCount: 2,
        _maxListeners: undefined,
        output: [],
        outputEncodings: [],
        outputCallbacks: [],
        outputSize: 0,
        writable: true,
        _last: false,
        chunkedEncoding: false,
        shouldKeepAlive: true,
        useChunkedEncodingByDefault: true,
        sendDate: true,
        _removedHeader: {},
        _contentLength: null,
        _hasBody: true,
        _trailer: '',
        finished: false,
        _headerSent: false,
        socket: [Circular],
        connection: [Circular],
        _header: null,
        _headers: null,
        _headerNames: {},
        _onPendingData: [Function: updateOutgoingData],
        statusCode: 404,
        __onFinished: [Object] } },
  connection: 
   Socket {
     _connecting: false,
     _hadError: false,
     _handle: 
      TCP {
        _externalStream: {},
        fd: -1,
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        onconnection: null,
        writeQueueSize: 0 },
     _parent: null,
     _host: null,
     _readableState: 
      ReadableState {
        objectMode: false,
        highWaterMark: 16384,
        buffer: [],
        length: 0,
        pipes: null,
        pipesCount: 0,
        flowing: true,
        ended: false,
        endEmitted: false,
        reading: true,
        sync: false,
        needReadable: true,
        emittedReadable: false,
        readableListening: false,
        resumeScheduled: false,
        defaultEncoding: 'utf8',
        ranOut: false,
        awaitDrain: 0,
        readingMore: false,
        decoder: null,
        encoding: null },
     readable: true,
     domain: null,
     _events: 
      { end: [Object],
        finish: [Function: onSocketFinish],
        _socketEnd: [Function: onSocketEnd],
        drain: [Object],
        timeout: [Function],
        error: [Object],
        close: [Object],
        data: [Function: socketOnData],
        resume: [Function: onSocketResume],
        pause: [Function: onSocketPause] },
     _eventsCount: 10,
     _maxListeners: undefined,
     _writableState: 
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        decodeStrings: false,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: true,
        bufferProcessing: false,
        onwrite: [Function],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: [Object] },
     writable: true,
     allowHalfOpen: true,
     destroyed: false,
     bytesRead: 0,
     _bytesDispatched: 0,
     _sockname: null,
     _pendingData: null,
     _pendingEncoding: '',
     server: 
      Server {
        domain: null,
        _events: [Object],
        _eventsCount: 3,
        _maxListeners: undefined,
        _connections: 1,
        _handle: [Object],
        _usingSlaves: false,
        _slaves: [],
        _unref: false,
        allowHalfOpen: true,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 120000,
        _pendingResponseData: 0,
        _connectionKey: '6::::3000' },
     _server: 
      Server {
        domain: null,
        _events: [Object],
        _eventsCount: 3,
        _maxListeners: undefined,
        _connections: 1,
        _handle: [Object],
        _usingSlaves: false,
        _slaves: [],
        _unref: false,
        allowHalfOpen: true,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 120000,
        _pendingResponseData: 0,
        _connectionKey: '6::::3000' },
     _idleTimeout: 120000,
     _idleNext: { _idleNext: [Circular], _idlePrev: [Circular] },
     _idlePrev: { _idleNext: [Circular], _idlePrev: [Circular] },
     _idleStart: 2147,
     parser: 
      HTTPParser {
        '0': [Function: parserOnHeaders],
        '1': [Function: parserOnHeadersComplete],
        '2': [Function: parserOnBody],
        '3': [Function: parserOnMessageComplete],
        '4': [Function: onParserExecute],
        _headers: [],
        _url: '',
        _consumed: true,
        socket: [Circular],
        incoming: [Circular],
        outgoing: null,
        maxHeaderPairs: 2000,
        onIncoming: [Function: parserOnIncoming] },
     on: [Function: socketOnWrap],
     _paused: false,
     read: [Function],
     _consuming: true,
     _httpMessage: 
      ServerResponse {
        domain: null,
        _events: [Object],
        _eventsCount: 2,
        _maxListeners: undefined,
        output: [],
        outputEncodings: [],
        outputCallbacks: [],
        outputSize: 0,
        writable: true,
        _last: false,
        chunkedEncoding: false,
        shouldKeepAlive: true,
        useChunkedEncodingByDefault: true,
        sendDate: true,
        _removedHeader: {},
        _contentLength: null,
        _hasBody: true,
        _trailer: '',
        finished: false,
        _headerSent: false,
        socket: [Circular],
        connection: [Circular],
        _header: null,
        _headers: null,
        _headerNames: {},
        _onPendingData: [Function: updateOutgoingData],
        statusCode: 404,
        __onFinished: [Object] } },
  httpVersionMajor: 1,
  httpVersionMinor: 1,
  httpVersion: '1.1',
  complete: false,
  headers: 
   { accept: '*/*',
     'cache-control': 'no-cache',
     'content-length': '265',
     'content-type': 'multipart/form-data; boundary=wfU2Iq_GnQAZ4-xl0rcJDsy1LA0-8euKBYcSfABQ',
     host: 'localhost:3000',
     connection: 'Keep-Alive',
     'user-agent': 'Apache-HttpClient/4.4.1 (Java/1.8.0_77)',
     'accept-encoding': 'gzip,deflate' },
  rawHeaders: 
   [ 'Accept',
     '*/*',
     'Cache-Control',
     'no-cache',
     'Content-Length',
     '265',
     'Content-Type',
     'multipart/form-data; boundary=wfU2Iq_GnQAZ4-xl0rcJDsy1LA0-8euKBYcSfABQ',
     'Host',
     'localhost:3000',
     'Connection',
     'Keep-Alive',
     'User-Agent',
     'Apache-HttpClient/4.4.1 (Java/1.8.0_77)',
     'Accept-Encoding',
     'gzip,deflate' ],
  trailers: {},
  rawTrailers: [],
  upgrade: false,
  url: '/test',
  method: 'POST',
  statusCode: null,
  statusMessage: null,
  client: 
   Socket {
     _connecting: false,
     _hadError: false,
     _handle: 
      TCP {
        _externalStream: {},
        fd: -1,
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        onconnection: null,
        writeQueueSize: 0 },
     _parent: null,
     _host: null,
     _readableState: 
      ReadableState {
        objectMode: false,
        highWaterMark: 16384,
        buffer: [],
        length: 0,
        pipes: null,
        pipesCount: 0,
        flowing: true,
        ended: false,
        endEmitted: false,
        reading: true,
        sync: false,
        needReadable: true,
        emittedReadable: false,
        readableListening: false,
        resumeScheduled: false,
        defaultEncoding: 'utf8',
        ranOut: false,
        awaitDrain: 0,
        readingMore: false,
        decoder: null,
        encoding: null },
     readable: true,
     domain: null,
     _events: 
      { end: [Object],
        finish: [Function: onSocketFinish],
        _socketEnd: [Function: onSocketEnd],
        drain: [Object],
        timeout: [Function],
        error: [Object],
        close: [Object],
        data: [Function: socketOnData],
        resume: [Function: onSocketResume],
        pause: [Function: onSocketPause] },
     _eventsCount: 10,
     _maxListeners: undefined,
     _writableState: 
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        decodeStrings: false,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: true,
        bufferProcessing: false,
        onwrite: [Function],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: [Object] },
     writable: true,
     allowHalfOpen: true,
     destroyed: false,
     bytesRead: 0,
     _bytesDispatched: 0,
     _sockname: null,
     _pendingData: null,
     _pendingEncoding: '',
     server: 
      Server {
        domain: null,
        _events: [Object],
        _eventsCount: 3,
        _maxListeners: undefined,
        _connections: 1,
        _handle: [Object],
        _usingSlaves: false,
        _slaves: [],
        _unref: false,
        allowHalfOpen: true,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 120000,
        _pendingResponseData: 0,
        _connectionKey: '6::::3000' },
     _server: 
      Server {
        domain: null,
        _events: [Object],
        _eventsCount: 3,
        _maxListeners: undefined,
        _connections: 1,
        _handle: [Object],
        _usingSlaves: false,
        _slaves: [],
        _unref: false,
        allowHalfOpen: true,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 120000,
        _pendingResponseData: 0,
        _connectionKey: '6::::3000' },
     _idleTimeout: 120000,
     _idleNext: { _idleNext: [Circular], _idlePrev: [Circular] },
     _idlePrev: { _idleNext: [Circular], _idlePrev: [Circular] },
     _idleStart: 2147,
     parser: 
      HTTPParser {
        '0': [Function: parserOnHeaders],
        '1': [Function: parserOnHeadersComplete],
        '2': [Function: parserOnBody],
        '3': [Function: parserOnMessageComplete],
        '4': [Function: onParserExecute],
        _headers: [],
        _url: '',
        _consumed: true,
        socket: [Circular],
        incoming: [Circular],
        outgoing: null,
        maxHeaderPairs: 2000,
        onIncoming: [Function: parserOnIncoming] },
     on: [Function: socketOnWrap],
     _paused: false,
     read: [Function],
     _consuming: true,
     _httpMessage: 
      ServerResponse {
        domain: null,
        _events: [Object],
        _eventsCount: 2,
        _maxListeners: undefined,
        output: [],
        outputEncodings: [],
        outputCallbacks: [],
        outputSize: 0,
        writable: true,
        _last: false,
        chunkedEncoding: false,
        shouldKeepAlive: true,
        useChunkedEncodingByDefault: true,
        sendDate: true,
        _removedHeader: {},
        _contentLength: null,
        _hasBody: true,
        _trailer: '',
        finished: false,
        _headerSent: false,
        socket: [Circular],
        connection: [Circular],
        _header: null,
        _headers: null,
        _headerNames: {},
        _onPendingData: [Function: updateOutgoingData],
        statusCode: 404,
        __onFinished: [Object] } },
  _consuming: false,
  _dumped: false,
  _parsedUrl: 
   Url {
     protocol: null,
     slashes: null,
     auth: null,
     host: null,
     port: null,
     hostname: null,
     hash: null,
     search: null,
     query: null,
     pathname: '/test',
     path: '/test',
     href: '/test',
     _raw: '/test' } }

[2016-07-08 13:53:08.077] - { status: 404, message: 'Not Found', header: {}, body: undefined }

[2016-07-08 13:53:51.401] - { method: 'POST',
  url: '/test',
  header: 
   { accept: '*/*',
     'cache-control': 'no-cache',
     'content-length': '253',
     'content-type': 'multipart/form-data; boundary=ecWX5Zja4SiZ9kaBDdkVFgZBzGIopNH-2x',
     host: 'localhost:3000',
     connection: 'Keep-Alive',
     'user-agent': 'Apache-HttpClient/4.4.1 (Java/1.8.0_77)',
     'accept-encoding': 'gzip,deflate' } }

[2016-07-08 13:54:16.597] - { method: 'POST',
  url: '/test?mail=abcd%40mail.ru&key=12345',
  header: 
   { accept: '*/*',
     'cache-control': 'no-cache',
     'content-length': '249',
     'content-type': 'multipart/form-data; boundary=O-xshsafgT6ltemuEE9YwDtpvnVvfPUQ',
     host: 'localhost:3000',
     connection: 'Keep-Alive',
     'user-agent': 'Apache-HttpClient/4.4.1 (Java/1.8.0_77)',
     'accept-encoding': 'gzip,deflate' } }

[2016-07-08 13:54:34.014] - undefined

[2016-07-08 13:54:50.572] - abcd@mail.ru

[2016-07-08 13:55:28.339] - { mail: 'abcd@mail.ru', key: '12345' }

[2016-07-08 13:55:57.740] - undefined

[2016-07-08 14:02:09.682] - {}

[2016-07-08 14:02:11.352] - {}

[2016-07-08 14:02:19.750] - {}

[2016-07-08 14:02:21.321] - {}

[2016-07-08 14:02:50.657] - {}

[2016-07-08 14:02:51.594] - {}

[2016-07-08 14:03:00.514] - undefined

[2016-07-08 14:03:01.567] - undefined

[2016-07-08 14:03:08.040] - {}

[2016-07-08 14:40:12.147] - dddsdfsdfsdf

[2016-07-08 14:40:46.244] - 

[2016-07-08 14:41:09.338] - {}

[2016-07-08 14:41:10.977] - {}

[2016-07-08 14:44:05.060] - {}

[2016-07-08 14:44:05.987] - {}

[2016-07-08 14:44:36.727] - {}

[2016-07-08 14:44:38.041] - {}

[2016-07-08 14:45:50.662] - {}

[2016-07-08 14:45:51.310] - {}

[2016-07-08 17:24:07.362] - {}

[2016-07-08 17:24:16.298] - {}

[2016-07-08 17:26:06.516] - undefined

[2016-07-08 17:26:07.601] - undefined

[2016-07-08 17:26:22.269] - undefined

[2016-07-08 17:30:22.525] - undefined

[2016-07-08 17:30:24.131] - undefined

[2016-07-08 17:33:46.642] - undefined

[2016-07-08 17:33:47.902] - undefined

[2016-07-08 17:33:58.261] - {}

[2016-07-08 17:35:17.078] - {}

[2016-07-08 17:35:18.408] - {}

[2016-07-08 17:37:11.698] - {}

[2016-07-08 17:37:12.650] - {}

[2016-07-08 17:37:36.500] - {}

[2016-07-08 17:37:37.444] - {}

[2016-07-08 17:37:53.790] - {}

[2016-07-08 17:37:54.768] - {}

[2016-07-08 17:38:28.729] - {}

[2016-07-08 17:38:30.733] - {}

[2016-07-08 17:57:09.135] - { files: 
   { '123.txt': 
      File {
        domain: null,
        _events: {},
        _eventsCount: 0,
        _maxListeners: undefined,
        size: 14,
        path: 'C:\\Users\\FLIPBO~1\\AppData\\Local\\Temp\\upload_ec31bd69ed3706ac4ce9d92719ec4f0e',
        name: '123.txt',
        type: 'application/octet-stream',
        hash: null,
        lastModifiedDate: Fri Jul 08 2016 17:57:09 GMT+0300 (RTZ 2 (зима)),
        _writeStream: [Object] } } }

[2016-07-08 17:57:33.327] - undefined

[2016-07-08 17:57:47.617] - undefined

[2016-07-08 17:57:59.791] - undefined

[2016-07-08 17:58:28.297] - undefined

[2016-07-08 17:58:29.227] - undefined

[2016-07-08 17:58:50.917] - undefined

[2016-07-08 17:58:58.064] - { files: 
   { '123.txt': 
      File {
        domain: null,
        _events: {},
        _eventsCount: 0,
        _maxListeners: undefined,
        size: 174,
        path: 'C:\\Users\\FLIPBO~1\\AppData\\Local\\Temp\\upload_9ea8c601c77216244111303b200227c3',
        name: '123.txt',
        type: 'application/octet-stream',
        hash: null,
        lastModifiedDate: Fri Jul 08 2016 17:58:58 GMT+0300 (RTZ 2 (зима)),
        _writeStream: [Object] } } }

[2016-07-08 17:59:15.747] - undefined

[2016-07-08 17:59:16.808] - undefined

[2016-07-08 17:59:36.781] - undefined

[2016-07-08 17:59:37.618] - undefined

[2016-07-08 17:59:49.065] - {}

[2016-07-08 18:03:01.204] - { files: 
   { '123.txt': 
      File {
        domain: null,
        _events: {},
        _eventsCount: 0,
        _maxListeners: undefined,
        size: 174,
        path: 'C:\\Users\\FLIPBO~1\\AppData\\Local\\Temp\\upload_b1706dc0611adb3f14e4dc994ae90c3b',
        name: '123.txt',
        type: 'application/octet-stream',
        hash: null,
        lastModifiedDate: Fri Jul 08 2016 18:03:01 GMT+0300 (RTZ 2 (зима)),
        _writeStream: [Object] } } }

[2016-07-08 18:04:30.541] - undefined

[2016-07-08 18:04:31.544] - undefined

[2016-07-08 18:04:32.183] - undefined

[2016-07-08 18:04:38.932] - undefined

[2016-07-08 18:04:39.788] - undefined

[2016-07-08 18:04:44.237] - { files: 
   { '123.txt': 
      File {
        domain: null,
        _events: {},
        _eventsCount: 0,
        _maxListeners: undefined,
        size: 174,
        path: 'C:\\Users\\FLIPBO~1\\AppData\\Local\\Temp\\upload_6ec9bb6757a33fecee07647700542bc5',
        name: '123.txt',
        type: 'application/octet-stream',
        hash: null,
        lastModifiedDate: Fri Jul 08 2016 18:04:44 GMT+0300 (RTZ 2 (зима)),
        _writeStream: [Object] } } }

[2016-07-08 18:05:02.616] - { method: 'POST',
  url: '/test?mail=abcd%40mail.ru&key=12345',
  header: 
   { accept: '*/*',
     'cache-control': 'no-cache',
     'content-length': '391',
     'content-type': 'multipart/form-data; boundary=lsWVm4JuOlLDiUUzlBiBu9oMuOLm31',
     host: 'localhost:3000',
     connection: 'Keep-Alive',
     'user-agent': 'Apache-HttpClient/4.4.1 (Java/1.8.0_77)',
     'accept-encoding': 'gzip,deflate' } }

[2016-07-08 18:05:19.608] - undefined

[2016-07-08 18:07:45.329] - {}

[2016-07-08 18:07:47.153] - {}

[2016-07-08 18:07:52.793] - { method: 'POST',
  url: '/test?mail=abcd%40mail.ru&key=12345',
  header: 
   { accept: '*/*',
     'cache-control': 'no-cache',
     'content-length': '401',
     'content-type': 'multipart/form-data; boundary=hkaTiLi2jEtzu-7J_h2_2lKSxrX6PIJP6c2',
     host: 'localhost:3000',
     connection: 'Keep-Alive',
     'user-agent': 'Apache-HttpClient/4.4.1 (Java/1.8.0_77)',
     'accept-encoding': 'gzip,deflate' } }

[2016-07-08 18:37:36.504] - { method: 'POST',
  url: '/test?mail=abcd%40mail.ru&key=12345',
  header: 
   { accept: '*/*',
     'cache-control': 'no-cache',
     'content-length': '397',
     'content-type': 'multipart/form-data; boundary=hjE9sDzhije7QQLHtNgO-I3FhieBCkvUt',
     host: 'localhost:3000',
     connection: 'Keep-Alive',
     'user-agent': 'Apache-HttpClient/4.4.1 (Java/1.8.0_77)',
     'accept-encoding': 'gzip,deflate' } }

[2016-07-08 18:48:34.047] - {}

[2016-07-08 18:48:35.242] - {}

[2016-07-08 18:48:57.031] - {}

[2016-07-08 18:48:58.132] - {}

[2016-07-08 18:51:14.968] - { fields: {},
  files: 
   { '123.txt': 
      File {
        domain: null,
        _events: {},
        _eventsCount: 0,
        _maxListeners: undefined,
        size: 174,
        path: 'C:\\Users\\FLIPBO~1\\AppData\\Local\\Temp\\upload_7a7216e7a293f397c71d410ef19442ca',
        name: '123.txt',
        type: 'application/octet-stream',
        hash: null,
        lastModifiedDate: Fri Jul 08 2016 18:51:14 GMT+0300 (RTZ 2 (зима)),
        _writeStream: [Object] } } }

[2016-07-08 18:53:11.123] - undefined

[2016-07-08 18:53:39.657] - undefined

[2016-07-08 18:53:45.393] - undefined

[2016-07-08 18:54:20.211] - undefined

[2016-07-08 19:00:43.925] - {}

[2016-07-08 19:00:44.781] - {}

[2016-07-08 19:01:21.246] - {}

[2016-07-08 19:01:22.248] - {}

[2016-07-08 19:01:41.561] - undefined

[2016-07-08 19:01:52.181] - { fields: {},
  files: 
   { '123.txt': 
      File {
        domain: null,
        _events: {},
        _eventsCount: 0,
        _maxListeners: undefined,
        size: 555,
        path: 'C:\\Users\\FLIPBO~1\\AppData\\Local\\Temp\\upload_96179e2e31bd6b1439ef296b07e42a4a',
        name: '123.txt',
        type: 'application/octet-stream',
        hash: null,
        lastModifiedDate: Fri Jul 08 2016 19:01:52 GMT+0300 (RTZ 2 (зима)),
        _writeStream: [Object] } } }

[2016-07-08 20:21:24.082] - { request: 
   { method: 'POST',
     url: '/test?mail=abcd%40mail.ru&key=12345',
     header: 
      { accept: '*/*',
        'cache-control': 'no-cache',
        'content-length': '419',
        'content-type': 'multipart/form-data; boundary=ipbjO9Ee45dL8U8WYy1Sfv4x4wFWO_wh7MZ',
        host: 'localhost:3000',
        connection: 'Keep-Alive',
        'user-agent': 'Apache-HttpClient/4.4.1 (Java/1.8.0_77)',
        'accept-encoding': 'gzip,deflate' } },
  response: { status: 404, message: 'Not Found', header: {} },
  app: { subdomainOffset: 2, proxy: false, env: 'development' },
  originalUrl: '/test?mail=abcd%40mail.ru&key=12345',
  req: '<original node req>',
  res: '<original node res>',
  socket: '<original node socket>' }

[2016-07-08 20:22:03.660] - {}

[2016-07-08 20:22:04.621] - {}

[2016-07-08 20:22:43.530] - {}

[2016-07-08 20:25:41.572] - {}

[2016-07-08 20:32:05.042] - {}

[2016-07-08 20:32:05.715] - {}

[2016-07-08 20:33:36.397] - {}

[2016-07-08 20:33:37.422] - {}

[2016-07-08 20:33:42.836] - {}

[2016-07-08 20:33:43.490] - {}

[2016-07-08 20:53:58.459] - { a: '1', b: '2' }

[2016-07-08 20:53:59.626] - { a: '1', b: '2' }

[2016-07-08 20:54:32.561] - 1

[2016-07-08 20:54:33.924] - 1

[2016-07-08 21:02:22.668] - [Function: answer]

[2016-07-08 21:02:26.092] - [Function: answer]

[2016-07-08 21:02:38.217] - [Function: answer]

[2016-07-08 21:02:39.357] - [Function: answer]

[2016-07-08 21:03:03.170] - undefined

[2016-07-08 21:03:04.268] - undefined

[2016-07-08 21:03:07.711] - undefined

[2016-07-08 21:11:23.768] - {}

[2016-07-08 21:11:25.765] - {}

[2016-07-08 21:12:37.725] - {}

[2016-07-08 21:13:59.569] - {}

[2016-07-08 21:14:00.838] - {}

[2016-07-08 21:14:16.166] - {}

[2016-07-08 21:14:17.137] - {}

[2016-07-08 21:14:26.584] - {}

[2016-07-08 21:14:27.399] - {}

[2016-07-08 21:27:52.764] - { '1': 'abcd@mail.ru', '2': '1234' }

[2016-07-12 12:27:25.303] - { '1': 'abcd@mail.ru', '2': '1234' }

[2016-07-12 13:03:09.959] - { '1': 'abcd@mail.ru', '2': '1234' }

[2016-07-12 13:03:12.178] - { '1': 'abcd@mail.ru', '2': '1234' }

[2016-07-12 13:03:12.645] - { '1': 'abcd@mail.ru', '2': '1234' }

[2016-07-12 13:03:13.143] - { '1': 'abcd@mail.ru', '2': '1234' }

[2016-07-12 13:03:34.320] - undefined

[2016-07-12 13:03:35.353] - undefined

[2016-07-12 13:03:47.530] - 12

[2016-07-12 13:03:48.647] - 12

[2016-07-12 13:07:44.851] - { '1': 'abcd@mail.ru', '2': '1234', '3': undefined }

[2016-07-12 13:07:47.088] - { '1': 'abcd@mail.ru', '2': '1234', '3': undefined }

[2016-07-12 13:08:19.703] - undefined

[2016-07-12 13:08:19.708] - { '1': 'abcd@mail.ru', '2': '1234' }

[2016-07-12 23:51:05.190] - TypeError: Cannot read property 'capitilizeFirstLetter' of undefinedERROR

[2016-07-12 23:51:31.054] - TypeError: Cannot read property 'capitilizeFirstLetter' of undefinedERROR

[2016-07-12 23:51:31.928] - TypeError: Cannot read property 'capitilizeFirstLetter' of undefinedERROR

[2016-07-12 23:51:35.550] - TypeError: Cannot read property 'capitilizeFirstLetter' of undefinedERROR

[2016-07-12 23:51:35.557] - undefined

[2016-07-12 23:51:49.736] - TypeError: You may only yield a function, promise, generator, array, or object, but the following object was passed: "1"ERROR

[2016-07-12 23:51:49.739] - undefined

[2016-07-12 23:54:05.746] - 3

[2016-07-12 23:54:07.330] - 3

[2016-07-12 23:56:04.958] - { '1': 3, '2': 1, '3': 2 }

[2016-07-12 23:57:16.891] - { '1': 3, '2': 1, '3': 2 }

[2016-07-12 23:57:26.896] - before a

[2016-07-12 23:57:26.903] - after a

[2016-07-12 23:57:26.903] - before b

[2016-07-12 23:57:26.904] - before b

[2016-07-12 23:57:26.904] - { '1': 3, '2': 1, '3': 2 }

[2016-07-12 23:57:52.602] - before a

[2016-07-12 23:57:52.605] - after a

[2016-07-12 23:57:52.606] - before b

[2016-07-12 23:57:52.606] - before b

[2016-07-12 23:57:52.606] - { '1': 3, '2': {}, '3': 2 }

[2016-07-12 23:58:13.187] - before a

[2016-07-12 23:58:13.191] - after a

[2016-07-12 23:58:13.191] - before b

[2016-07-12 23:58:13.192] - before b

[2016-07-12 23:58:13.193] - { '1': 3, '2': 1, '3': 2 }

[2016-07-12 23:58:23.910] - before a

[2016-07-12 23:58:23.917] - after a

[2016-07-12 23:58:23.917] - before b

[2016-07-12 23:58:23.917] - before b

[2016-07-12 23:58:23.918] - { '1': 3, '2': 1, '3': {} }

